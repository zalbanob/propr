cmake_minimum_required(VERSION 3.15)

set(CMAKE_MODULE_PATH /home/zalbanob/propr/cmake)
set(RCPP_INCLUDE_DIRS /home/zalbanob/R/x86_64-pc-linux-gnu-library/4.5/Rcpp/include)
set(RCPP_LIB_PATH /home/zalbanob/R/x86_64-pc-linux-gnu-library/4.5/Rcpp/libs)

set(CMAKE_CUDA_ARCHITECTURES 80 90)
set(CUDACXX "/usr/local/cuda/bin/nvcc" CACHE FILEPATH "Path to nvcc compiler")
project(propr LANGUAGES CXX CUDA)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(R REQUIRED)
execute_process(
        COMMAND "${R_BINARY}" -e "cat(Rcpp:::CxxFlags())"
        OUTPUT_VARIABLE RCPP_CXX_FLAGS_OUTPUT
        OUTPUT_STRIP_TRAILING_WHITESPACE
)
string(REPLACE "-I" "" RCPP_INCLUDE_DIRS_RAW "${RCPP_CXX_FLAGS_OUTPUT}")
string(REPLACE " " ";" RCPP_INCLUDE_DIRS "${RCPP_INCLUDE_DIRS_RAW}")
execute_process(
        COMMAND "${R_BINARY}" -e "cat(Rcpp:::LdFlags())"
        OUTPUT_VARIABLE RCPP_LDFLAGS_OUTPUT
        OUTPUT_STRIP_TRAILING_WHITESPACE
)
set(RCPP_LINK_DIRS "")
set(RCPP_LIBRARIES_LIST "")
string(REGEX MATCHALL "-L[^ ]+" RCPP_LIB_DIRS_MATCHES "${RCPP_LDFLAGS_OUTPUT}")
foreach(MATCH ${RCPP_LIB_DIRS_MATCHES})
    string(REPLACE "-L" "" LIB_DIR ${MATCH})
    list(APPEND RCPP_LINK_DIRS ${LIB_DIR})
endforeach()

string(REGEX MATCHALL "-l[^ ]+" RCPP_LIB_NAMES_MATCHES "${RCPP_LDFLAGS_OUTPUT}")
foreach(MATCH ${RCPP_LIB_NAMES_MATCHES})
    string(REPLACE "-l" "" LIB_NAME ${MATCH})
    list(APPEND RCPP_LIBRARIES_LIST ${LIB_NAME})
endforeach()

find_package(CUDAToolkit 11.0 REQUIRED)


set(PROPR_LIB_SOURCES
        src/kernels/cuda/lrm.cu
        src/kernels/cuda/lrv.cu

        src/dispatch/cpu/backend.cpp
        src/dispatch/cpu/comparison.cpp
        src/dispatch/cpu/ctzRcpp.cpp
        src/dispatch/cpu/graflex.cpp
        src/dispatch/cpu/lr2propr.cpp
        src/dispatch/cpu/lrm.cpp
        src/dispatch/cpu/lrv.cpp
        src/dispatch/cpu/omega.cpp

        src/RcppExports.cpp
        inst/include/propr/context.h
        inst/include/propr/interface/device_selector.hpp
        src/dispatch/device_selector.cpp
        src/interface/lrv.cpp
        src/interface/lrm.cpp
        src/dispatch/cpu/lrm.cpp
        src/dispatch/cpu/backend.cpp
        inst/include/propr/kernels/cpu/dispatch/backend.hpp
        src/interface/backend.cpp
        src/interface/comparison.cpp
        src/interface/graflex.cpp
        src/interface/lr2propr.cpp
        src/interface/omega.cpp
)

set(PROPR_BENCHMARK_SOURCES bench/src/main_benchmark.cu )

set(PROPR_TEST_SOURCES
        tests/cpp_test/test_lrm.cpp
        tests/cpp_test/test_lrv.cpp
        tests/cpp_test/test_main.cpp
        tests/cpp_test/test_omega.cpp
)


add_library(propr SHARED ${PROPR_LIB_SOURCES})

target_compile_features(propr PUBLIC cxx_std_14)
set_target_properties(propr PROPERTIES
        CUDA_STANDARD 14
        CUDA_ARCHITECTURES "${CMAKE_CUDA_ARCHITECTURES}"
)

# Specify include directories for the library.
target_include_directories(propr PUBLIC
        # R includes (from find_package(R))
        ${R_INCLUDE_DIRS}
        # Rcpp includes (parsed from Rcpp:::CxxFlags())
        ${RCPP_INCLUDE_DIRS}
        # CUDA Toolkit includes (from find_package(CUDAToolkit))
        ${CUDAToolkit_INCLUDE_DIRS}
        # Local project headers (e.g., src/include/interface, src/include/kernels etc.)
        inst/include
        # Prereq headers (e.g., Catch2 for tests, if they are part of the main library)
        # The original CMakeLists.txt had `include_directories(prereq)`.
        # Assuming `prereq` includes `prereq/catch2` and other necessary headers.
        ${CMAKE_CURRENT_SOURCE_DIR}/prereq
)

# Link libraries for the main shared library.
target_link_libraries(propr PUBLIC
        # R runtime libraries (from find_package(R))
        ${R_LIBRARIES}
        # Rcpp libraries (parsed from Rcpp:::LdFlags())
        ${RCPP_LIBRARIES_LIST}
        # CUDA runtime libraries (from find_package(CUDAToolkit))
        ${CUDAToolkit_LIBRARIES}
)

target_link_directories(propr PUBLIC ${RCPP_LINK_DIRS})
set_target_properties(propr PROPERTIES OUTPUT_NAME "propr" SUFFIX ".so")

add_executable(propr_benchmark ${PROPR_BENCHMARK_SOURCES})
target_link_libraries(propr_benchmark PRIVATE propr)

target_include_directories(propr_benchmark PRIVATE inst/include)

# Set compile features for benchmark.
target_compile_features(propr_benchmark PUBLIC cxx_std_14)
set_target_properties(propr_benchmark PROPERTIES
        CUDA_STANDARD 14
        CUDA_ARCHITECTURES "${CMAKE_CUDA_ARCHITECTURES}"
)

add_executable(propr_tests ${PROPR_TEST_SOURCES})
target_link_libraries(propr_tests PRIVATE propr)
target_include_directories(propr_tests PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/prereq/catch2
        inst/include
)

target_compile_features(propr_tests PUBLIC cxx_std_14)
set_target_properties(propr_tests PROPERTIES CUDA_STANDARD 14 CUDA_ARCHITECTURES "${CMAKE_CUDA_ARCHITECTURES}")

enable_testing()
add_test(NAME run_propr_cpp_tests COMMAND propr_tests)
