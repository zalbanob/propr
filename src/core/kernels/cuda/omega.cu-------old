
#include <cstdio>
#include <cstdlib>
#include <cublas_v2.h>
#include <cuda_runtime.h>

#include "./include/kernels/cuda/detail/omega.cuh"
#include  "./include/utils.hpp"


void OmegaImpl(
    const double*        d_W,       // Device pointer to W (size = nRows × nFeats)
    double*              d_G,       // Device pointer to G (size = nFeats × nFeats)
    double*              h_result,  // Host buffer to receive the lower triangle entries
    int                  nRows,
    int                  nFeats
) {
    cublasHandle_t handle;
    checkCublas(cublasCreate(&handle), "cublasCreate");

    // Compute G = W^T * W  (dimension: [nFeats×nRows] × [nRows×nFeats] -> [nFeats×nFeats])
    const double alpha = 1.0;
    const double beta  = 0.0;
    checkCublas(
        cublasDgemm(
            handle,
            CUBLAS_OP_T,       // transpose the “rows×feats” matrix
            CUBLAS_OP_N,
            nFeats,            // # rows of G
            nFeats,            // # cols of G
            nRows,             // “inner dimension”
            &alpha,
            d_W,               // A = d_W (nRows × nFeats), leading dim = nRows
            nRows,
            d_W,               // B = d_W (nRows × nFeats), leading dim = nRows
            nRows,
            &beta,
            d_G,               // output G (nFeats × nFeats), leading dim = nFeats
            nFeats
        ),
        "cublasDgemm( W^T·W )"
    );

    size_t bytesG = sizeof(double) * (size_t)nFeats * (size_t)nFeats;
    double* h_G = (double*)malloc(bytesG);
    if (h_G == nullptr) {
        fprintf(stderr, "[ERROR] could not allocate host memory for G\n");
        exit(EXIT_FAILURE);
    }
    CUDA_CHECK(cudaMemcpy(h_G, d_G, bytesG, cudaMemcpyDeviceToHost));
    int counter = 0;
    for (int i = 1; i < nFeats; ++i) {
        for (int j = 0; j < i; ++j) {
            h_result[counter++] = h_G[j + i * nFeats];
        }
    }

    free(h_G);
    cublasDestroy(handle);
}

void OmegaBasic_cuda(
    const double* h_W,
    double*       h_result,
    int           nRows,
    int           nFeats
) {
    int llt = (nFeats * (nFeats - 1)) / 2;
    double* d_W   = nullptr;
    double* d_G   = nullptr;
    size_t bytesW = sizeof(double) * (size_t)nRows * (size_t)nFeats;
    size_t bytesG = sizeof(double) * (size_t)nFeats * (size_t)nFeats;

    CUDA_CHECK(cudaMalloc((void**)&d_W, bytesW));
    CUDA_CHECK(cudaMalloc((void**)&d_G, bytesG));
    CUDA_CHECK(cudaMemcpy(d_W, h_W, bytesW, cudaMemcpyHostToDevice));

    OmegaImpl(d_W, d_G, h_result, nRows, nFeats);

    CUDA_CHECK(cudaFree(d_W));
    CUDA_CHECK(cudaFree(d_G));
}