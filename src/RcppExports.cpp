// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// propr::wtmRcpp
double propr::wtmRcpp(Rcpp::NumericVector x, Rcpp::NumericVector w);
RcppExport SEXP _propr_propr::wtmRcpp(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::wtmRcpp(x, w));
    return rcpp_result_gen;
END_RCPP
}
// propr::wtvRcpp
double propr::wtvRcpp(Rcpp::NumericVector x, Rcpp::NumericVector w);
RcppExport SEXP _propr_propr::wtvRcpp(SEXP xSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::wtvRcpp(x, w));
    return rcpp_result_gen;
END_RCPP
}
// propr::corRcpp
Rcpp::NumericMatrix propr::corRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::corRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::corRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::covRcpp
Rcpp::NumericMatrix propr::covRcpp(Rcpp::NumericMatrix X, int norm_type);
RcppExport SEXP _propr_propr::covRcpp(SEXP XSEXP, SEXP norm_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type norm_type(norm_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::covRcpp(X, norm_type));
    return rcpp_result_gen;
END_RCPP
}
// propr::vlrRcpp
Rcpp::NumericMatrix propr::vlrRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::vlrRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::vlrRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::clrRcpp
Rcpp::NumericMatrix propr::clrRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::clrRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::clrRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::alrRcpp
Rcpp::NumericMatrix propr::alrRcpp(Rcpp::NumericMatrix X, int ivar);
RcppExport SEXP _propr_propr::alrRcpp(SEXP XSEXP, SEXP ivarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type ivar(ivarSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::alrRcpp(X, ivar));
    return rcpp_result_gen;
END_RCPP
}
// propr::symRcpp
Rcpp::NumericMatrix propr::symRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::symRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::symRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::phiRcpp
Rcpp::NumericMatrix propr::phiRcpp(Rcpp::NumericMatrix X, bool sym);
RcppExport SEXP _propr_propr::phiRcpp(SEXP XSEXP, SEXP symSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< bool >::type sym(symSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::phiRcpp(X, sym));
    return rcpp_result_gen;
END_RCPP
}
// propr::rhoRcpp
Rcpp::NumericMatrix propr::rhoRcpp(Rcpp::NumericMatrix X, Rcpp::NumericMatrix lr, int ivar);
RcppExport SEXP _propr_propr::rhoRcpp(SEXP XSEXP, SEXP lrSEXP, SEXP ivarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    Rcpp::traits::input_parameter< int >::type ivar(ivarSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::rhoRcpp(X, lr, ivar));
    return rcpp_result_gen;
END_RCPP
}
// propr::indexPairs
std::vector<int> propr::indexPairs(Rcpp::NumericMatrix X, Rcpp::String op, double ref);
RcppExport SEXP _propr_propr::indexPairs(SEXP XSEXP, SEXP opSEXP, SEXP refSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type op(opSEXP);
    Rcpp::traits::input_parameter< double >::type ref(refSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::indexPairs(X, op, ref));
    return rcpp_result_gen;
END_RCPP
}
// propr::indexToCoord
Rcpp::List propr::indexToCoord(Rcpp::IntegerVector V, int N);
RcppExport SEXP _propr_propr::indexToCoord(SEXP VSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::indexToCoord(V, N));
    return rcpp_result_gen;
END_RCPP
}
// propr::coordToIndex
Rcpp::IntegerVector propr::coordToIndex(Rcpp::IntegerVector row, Rcpp::IntegerVector col, int N);
RcppExport SEXP _propr_propr::coordToIndex(SEXP rowSEXP, SEXP colSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type col(colSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::coordToIndex(row, col, N));
    return rcpp_result_gen;
END_RCPP
}
// propr::linRcpp
Rcpp::NumericMatrix propr::linRcpp(Rcpp::NumericMatrix rho, Rcpp::NumericMatrix lr);
RcppExport SEXP _propr_propr::linRcpp(SEXP rhoSEXP, SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::linRcpp(rho, lr));
    return rcpp_result_gen;
END_RCPP
}
// propr::lltRcpp
Rcpp::NumericVector propr::lltRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::lltRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::lltRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::urtRcpp
Rcpp::NumericVector propr::urtRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::urtRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::urtRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::labRcpp
Rcpp::List propr::labRcpp(int nfeats);
RcppExport SEXP _propr_propr::labRcpp(SEXP nfeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nfeats(nfeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::labRcpp(nfeats));
    return rcpp_result_gen;
END_RCPP
}
// propr::half2mat
Rcpp::NumericMatrix propr::half2mat(Rcpp::NumericVector X);
RcppExport SEXP _propr_propr::half2mat(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::half2mat(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::vector2mat
Rcpp::NumericMatrix propr::vector2mat(Rcpp::NumericVector X, Rcpp::IntegerVector i, Rcpp::IntegerVector j, int nfeats);
RcppExport SEXP _propr_propr::vector2mat(SEXP XSEXP, SEXP iSEXP, SEXP jSEXP, SEXP nfeatsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type nfeats(nfeatsSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::vector2mat(X, i, j, nfeats));
    return rcpp_result_gen;
END_RCPP
}
// propr::ratiosRcpp
Rcpp::NumericMatrix propr::ratiosRcpp(Rcpp::NumericMatrix X);
RcppExport SEXP _propr_propr::ratiosRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::ratiosRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::results2matRcpp
Rcpp::NumericMatrix propr::results2matRcpp(Rcpp::DataFrame results, int n, double diagonal);
RcppExport SEXP _propr_propr::results2matRcpp(SEXP resultsSEXP, SEXP nSEXP, SEXP diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type results(resultsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type diagonal(diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::results2matRcpp(results, n, diagonal));
    return rcpp_result_gen;
END_RCPP
}
// propr::count_less_than
int propr::count_less_than(Rcpp::NumericVector x, double cutoff);
RcppExport SEXP _propr_propr::count_less_than(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::count_less_than(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// propr::count_greater_than
int propr::count_greater_than(Rcpp::NumericVector x, double cutoff);
RcppExport SEXP _propr_propr::count_greater_than(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::count_greater_than(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// propr::count_less_equal_than
int propr::count_less_equal_than(Rcpp::NumericVector x, double cutoff);
RcppExport SEXP _propr_propr::count_less_equal_than(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::count_less_equal_than(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// propr::count_greater_equal_than
int propr::count_greater_equal_than(Rcpp::NumericVector x, double cutoff);
RcppExport SEXP _propr_propr::count_greater_equal_than(SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::count_greater_equal_than(x, cutoff));
    return rcpp_result_gen;
END_RCPP
}
// propr::ctzRcpp
Rcpp::NumericVector propr::ctzRcpp(Rcpp::NumericMatrix& X);
RcppExport SEXP _propr_propr::ctzRcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::ctzRcpp(X));
    return rcpp_result_gen;
END_RCPP
}
// propr::getOR
Rcpp::NumericVector propr::getOR(const Rcpp::IntegerMatrix& A, const Rcpp::IntegerMatrix& G);
RcppExport SEXP _propr_propr::getOR(SEXP ASEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::getOR(A, G));
    return rcpp_result_gen;
END_RCPP
}
// propr::getORperm
Rcpp::NumericVector propr::getORperm(const Rcpp::IntegerMatrix& A, const Rcpp::IntegerMatrix& G, const Rcpp::IntegerVector& perm);
RcppExport SEXP _propr_propr::getORperm(SEXP ASEXP, SEXP GSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::getORperm(A, G, perm));
    return rcpp_result_gen;
END_RCPP
}
// propr::permuteOR
Rcpp::NumericMatrix propr::permuteOR(const Rcpp::IntegerMatrix& A, const Rcpp::IntegerMatrix& G, int p);
RcppExport SEXP _propr_propr::permuteOR(SEXP ASEXP, SEXP GSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::permuteOR(A, G, p));
    return rcpp_result_gen;
END_RCPP
}
// propr::getFDR
Rcpp::List propr::getFDR(double actual, const Rcpp::NumericVector& permuted);
RcppExport SEXP _propr_propr::getFDR(SEXP actualSEXP, SEXP permutedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type actual(actualSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type permuted(permutedSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::getFDR(actual, permuted));
    return rcpp_result_gen;
END_RCPP
}
// propr::getG
Rcpp::IntegerMatrix propr::getG(const Rcpp::IntegerVector& Gk);
RcppExport SEXP _propr_propr::getG(SEXP GkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type Gk(GkSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::getG(Gk));
    return rcpp_result_gen;
END_RCPP
}
// propr::graflex
Rcpp::NumericVector propr::graflex(const Rcpp::IntegerMatrix& A, const Rcpp::IntegerVector& Gk, int p);
RcppExport SEXP _propr_propr::graflex(SEXP ASEXP, SEXP GkSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type Gk(GkSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::graflex(A, Gk, p));
    return rcpp_result_gen;
END_RCPP
}
// propr::lr2vlr
Rcpp::NumericMatrix propr::lr2vlr(Rcpp::NumericMatrix lr);
RcppExport SEXP _propr_propr::lr2vlr(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::lr2vlr(lr));
    return rcpp_result_gen;
END_RCPP
}
// propr::lr2phi
Rcpp::NumericMatrix propr::lr2phi(Rcpp::NumericMatrix lr);
RcppExport SEXP _propr_propr::lr2phi(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::lr2phi(lr));
    return rcpp_result_gen;
END_RCPP
}
// propr::lr2rho
Rcpp::NumericMatrix propr::lr2rho(Rcpp::NumericMatrix lr);
RcppExport SEXP _propr_propr::lr2rho(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::lr2rho(lr));
    return rcpp_result_gen;
END_RCPP
}
// propr::lr2phs
Rcpp::NumericMatrix propr::lr2phs(Rcpp::NumericMatrix lr);
RcppExport SEXP _propr_propr::lr2phs(SEXP lrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lr(lrSEXP);
    rcpp_result_gen = Rcpp::wrap(propr::lr2phs(lr));
    return rcpp_result_gen;
END_RCPP
}
// lrm
NumericVector lrm(NumericMatrix& Y, NumericMatrix& W, bool weighted, double a, NumericMatrix Yfull, NumericMatrix Wfull);
RcppExport SEXP _propr_lrm(SEXP YSEXP, SEXP WSEXP, SEXP weightedSEXP, SEXP aSEXP, SEXP YfullSEXP, SEXP WfullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Yfull(YfullSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wfull(WfullSEXP);
    rcpp_result_gen = Rcpp::wrap(lrm(Y, W, weighted, a, Yfull, Wfull));
    return rcpp_result_gen;
END_RCPP
}
// lrv
NumericVector lrv(NumericMatrix& Y, NumericMatrix& W, bool weighted, double a, NumericMatrix Yfull, NumericMatrix Wfull);
RcppExport SEXP _propr_lrv(SEXP YSEXP, SEXP WSEXP, SEXP weightedSEXP, SEXP aSEXP, SEXP YfullSEXP, SEXP WfullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type W(WSEXP);
    Rcpp::traits::input_parameter< bool >::type weighted(weightedSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Yfull(YfullSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Wfull(WfullSEXP);
    rcpp_result_gen = Rcpp::wrap(lrv(Y, W, weighted, a, Yfull, Wfull));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_propr_propr::wtmRcpp", (DL_FUNC) &_propr_propr::wtmRcpp, 2},
    {"_propr_propr::wtvRcpp", (DL_FUNC) &_propr_propr::wtvRcpp, 2},
    {"_propr_propr::corRcpp", (DL_FUNC) &_propr_propr::corRcpp, 1},
    {"_propr_propr::covRcpp", (DL_FUNC) &_propr_propr::covRcpp, 2},
    {"_propr_propr::vlrRcpp", (DL_FUNC) &_propr_propr::vlrRcpp, 1},
    {"_propr_propr::clrRcpp", (DL_FUNC) &_propr_propr::clrRcpp, 1},
    {"_propr_propr::alrRcpp", (DL_FUNC) &_propr_propr::alrRcpp, 2},
    {"_propr_propr::symRcpp", (DL_FUNC) &_propr_propr::symRcpp, 1},
    {"_propr_propr::phiRcpp", (DL_FUNC) &_propr_propr::phiRcpp, 2},
    {"_propr_propr::rhoRcpp", (DL_FUNC) &_propr_propr::rhoRcpp, 3},
    {"_propr_propr::indexPairs", (DL_FUNC) &_propr_propr::indexPairs, 3},
    {"_propr_propr::indexToCoord", (DL_FUNC) &_propr_propr::indexToCoord, 2},
    {"_propr_propr::coordToIndex", (DL_FUNC) &_propr_propr::coordToIndex, 3},
    {"_propr_propr::linRcpp", (DL_FUNC) &_propr_propr::linRcpp, 2},
    {"_propr_propr::lltRcpp", (DL_FUNC) &_propr_propr::lltRcpp, 1},
    {"_propr_propr::urtRcpp", (DL_FUNC) &_propr_propr::urtRcpp, 1},
    {"_propr_propr::labRcpp", (DL_FUNC) &_propr_propr::labRcpp, 1},
    {"_propr_propr::half2mat", (DL_FUNC) &_propr_propr::half2mat, 1},
    {"_propr_propr::vector2mat", (DL_FUNC) &_propr_propr::vector2mat, 4},
    {"_propr_propr::ratiosRcpp", (DL_FUNC) &_propr_propr::ratiosRcpp, 1},
    {"_propr_propr::results2matRcpp", (DL_FUNC) &_propr_propr::results2matRcpp, 3},
    {"_propr_propr::count_less_than", (DL_FUNC) &_propr_propr::count_less_than, 2},
    {"_propr_propr::count_greater_than", (DL_FUNC) &_propr_propr::count_greater_than, 2},
    {"_propr_propr::count_less_equal_than", (DL_FUNC) &_propr_propr::count_less_equal_than, 2},
    {"_propr_propr::count_greater_equal_than", (DL_FUNC) &_propr_propr::count_greater_equal_than, 2},
    {"_propr_propr::ctzRcpp", (DL_FUNC) &_propr_propr::ctzRcpp, 1},
    {"_propr_propr::getOR", (DL_FUNC) &_propr_propr::getOR, 2},
    {"_propr_propr::getORperm", (DL_FUNC) &_propr_propr::getORperm, 3},
    {"_propr_propr::permuteOR", (DL_FUNC) &_propr_propr::permuteOR, 3},
    {"_propr_propr::getFDR", (DL_FUNC) &_propr_propr::getFDR, 2},
    {"_propr_propr::getG", (DL_FUNC) &_propr_propr::getG, 1},
    {"_propr_propr::graflex", (DL_FUNC) &_propr_propr::graflex, 3},
    {"_propr_propr::lr2vlr", (DL_FUNC) &_propr_propr::lr2vlr, 1},
    {"_propr_propr::lr2phi", (DL_FUNC) &_propr_propr::lr2phi, 1},
    {"_propr_propr::lr2rho", (DL_FUNC) &_propr_propr::lr2rho, 1},
    {"_propr_propr::lr2phs", (DL_FUNC) &_propr_propr::lr2phs, 1},
    {"_propr_lrm", (DL_FUNC) &_propr_lrm, 6},
    {"_propr_lrv", (DL_FUNC) &_propr_lrv, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_propr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
